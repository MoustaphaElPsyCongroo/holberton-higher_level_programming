Function that divides all elements of a matrix:
	>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Normal case:
	>>> matrix = [[1, 2, 3], [4, 5, 6]]
	>>> matrix_divided(matrix, 3)
	[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

Empty matrix:
	>>> matrix = []
	>>> matrix_divided(matrix, 3)
	Traceback (most recent call last):
	...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

Matrix not of integers/floats:
	>>> matrix = [["a", 2, 3], [1, 2, 3]]
	>>> matrix_divided(matrix, 3)
	Traceback (most recent call last):
	...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

Matrix rows not of the same size:
	>>> matrix = [[1, 2], [4, 5, 6]]
	>>> matrix_divided(matrix, 3)
	Traceback (most recent call last):
	...
	TypeError: Each row of the matrix must have the same size

Div must be a number:
	>>> matrix_divided(matrix, "a")
	Traceback (most recent call last):
	...
	TypeError: div must be a number

Div can't be equal to 0:
	>>> matrix_divided(matrix, 0)
	Traceback (most recent call last):
	...
	ZeroDivisionError: division by zero

All division results should be rounded to 2 decimal places:
	>>> matrix = [[1]]
	>>> matrix_divided(matrix, 3)
	[[0.33]]
	>>> matrix_divided(matrix, 3)[0][0] * 100
	33.0

Missing one argument:
	>>> matrix_divided(matrix)
	Traceback (most recent call last):
	...
	TypeError: matrix_divided() missing 1 required positional argument: 'div'

Missing two arguments:
	>>> matrix = [[1]]
	>>> matrix_divided()
	Traceback (most recent call last):
	...
	TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

Returns a new matrix:
	>>> old_matrix = [[1]]
	>>> matrix_divided(old_matrix, 3)
	[[0.33]]
	>>> old_matrix
	[[1]]

Float overflow:
	>>> matrix = [[1]]
	>>> matrix_divided(matrix, float('inf'))
	[[0.0]]
